# -*- coding: utf-8 -*-
"""Spam mail prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lPzyYXJvQ-mMBILeJtDQKqLGwNCOd85Y

#Import Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer  #convert test into feature vector
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""# Data Collection and preprocessing"""

#loading data

dataset = pd.read_csv('/content/mail_data.csv')
dataset.head()

dataset.isnull().sum()

"""Replace null values with null String"""

mail_data = dataset.where((pd.notnull(dataset)), '')

mail_data.head()

#checking number of rows and col

mail_data.shape

"""#Label Encoding


"""

#label spam mail -> 0  , ham mail -> 1

mail_data.loc[mail_data['Category'] == 'spam' , 'Category' ,] = 0
mail_data.loc[mail_data['Category'] == 'ham' , 'Category' ,] = 1

mail_data.head()

# separating data and labels

x = mail_data['Message']

y = mail_data['Category']

print(x)

print(y)

"""#Splitting into training and test data"""

x_train , x_test , y_train , y_test = train_test_split(x,y, test_size = 0.2 , random_state=3)

print(x.shape , x_train.shape , x_test.shape)

"""# Feature Extraction

Transform the text data to feature vectors that can be used as input to logistic regresssion model
"""

feature_extraction = TfidfVectorizer(min_df = 1 , stop_words = 'english' , lowercase = True)

x_train_features = feature_extraction.fit_transform(x_train)
x_test_features = feature_extraction.transform(x_test)

# convert y_train & y_test into int

y_train = y_train.astype('int')
y_test = y_test.astype('int')

print(x_train_features)

print(x_test_features)

"""# Training the model"""

model = LogisticRegression()

#training the model with training data

model.fit(x_train_features , y_train)

"""# Model Evaluation"""

# prediction on training data

prediction_on_training_data = model.predict(x_train_features)
accuracy_score_on_training_data = accuracy_score(y_train ,prediction_on_training_data)

print(accuracy_score_on_training_data)

# prediction on test data

prediction_on_test_data = model.predict(x_test_features)
accuracy_score_on_test_data = accuracy_score(y_test ,prediction_on_test_data)

print(accuracy_score_on_test_data)

"""# Prediction System"""

input_mail = ["So Ã¼ pay first lar... Then when is da stock comin..."]

# convert test to feature vectors

input_data_features = feature_extraction.transform(input_mail)

#making prediction

prediction = model.predict(input_data_features)

if(prediction):
  print('Ham mail')
else:
  print('Spam mail')

